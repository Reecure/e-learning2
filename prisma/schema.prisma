generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type LessonsLessonContent {
  blocks LessonsLessonContentBlocks[]
}

type ModuleLessons {
  id          String
  lesson_id   String
  is_visible  Boolean
  title       String
  lesson_type String
  order       Int
  author_id   String
}

type CourseModules {
  id         String
  module_id  String
  is_visible Boolean
  title      String
  order      Int
  author_id  String
}

type LessonsLessonContentBlocks {
  /// Multiple data types found: String: 40%, Array(LessonsLessonContentBlocksAnswer): 60% out of 5 sampled entries
  answer        Json?
  code          String?
  correctAnswer String?
  id            String
  paragraphs    LessonsLessonContentBlocksParagraphs[]
  question      String?
  src           String?
  title         String?
  type          String
  url           String?
}

type LessonsLessonContentBlocksAnswer {
  otherAnswer String
}

type LessonsLessonContentBlocksParagraphs {
  id   String
  text String
}

type UsersCoursesProgress {
  course_id           String
  is_completed        Boolean
  course_name         String
  start_course        String?
  complete_percentage Int?
}

type UsersLessonsProgress {
  lesson_name   String
  complete_date DateTime @db.Date
  read_later    Boolean?
  is_completed  Boolean
  lessonType    String
  module_id     String
  lesson_id     String
  quizScore     Int
}

type UsersModulesProgress {
  real_module_id String?
  module_name    String
  is_completed   Boolean
  module_id      String
  course_id      String
}

model course_categories {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  @@map("course-categories")
}

model news {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  author_id     String   @db.ObjectId
  title         String
  description   String
  creation_date DateTime @db.Date
}

model courses {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  author_id         String          @db.ObjectId
  category_id       String
  cover_description String
  modules           CourseModules[]
  cover_image       String
  creation_date     DateTime        @db.Date
  update_date       DateTime?       @db.Date
  description       String
  difficulty_level  String
  duration          String
  is_visible        Boolean
  rating            Int
  title             String
}

model events_and_activities {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  @@map("events-and-activities")
}

model grades_and_progress {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  @@map("grades-and-progress")
}

model lessons {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  author_id      String               @db.ObjectId
  lesson_content LessonsLessonContent
  lesson_type    String
  module_id      String               @db.ObjectId
  order          Int
  title          String
}

model modules {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  course_id  String          @map(" course_id") @db.ObjectId
  author_id  String          @db.ObjectId
  lessons    ModuleLessons[]
  is_visible Boolean
  title      String
}

model reviews {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model users {
  id                String                 @id @default(auto()) @map("_id") @db.ObjectId
  avatar            String
  courses           String[]
  courses_progress  UsersCoursesProgress[]
  email             String                 @unique
  firstname         String
  is_new_user       Boolean
  lastname          String
  favorite_course   String?
  last_course       String?
  lessons_progress  UsersLessonsProgress[]
  modules_progress  UsersModulesProgress[]
  password          String
  registration_date DateTime               @db.Date
  role              String
}
